c
email
n
s
n
s
n
s
q
c
n
match
n
match
n
recipients
precipients
n
q
c
n
match
n
match
n
match
n
match
n
match
n
recipients
n
recipients
q
x
c
email_file
c
match
body
c
body
match
body
c
match
body
c
body
c
body
match
c
email
match
match[0]
body
email
n
match.length
match
c
result
c
body
n
body
n
c
n
c
result
c
result
c
result[:message]
result
c
Utils.trim_string(body)
body
n
match[3]
match.count
match.inspect
match
c
match
match[3]&.start_with?("\n\n")
match.length > 2
match
c
match
c
match
q
c
match
q
c
true.class
true.is_a?(bool)
true.is_a?(Boolean)
true.is_a?(Bool)
true.is_a?(String)
true.is_a?(string)
result.forwarded
result.forwarde
result
q
c
puts result[:message]
n
p forwarded
n
p result[:email]
n
subject
forwarded
n
forwarded
n
forwarded
c
match
puts body
puts match[0]
c
result[:message]
result
c
email.dig(:to,0,:name)
email.dig(:to,0)
email.dig(:to)
c
puts match
n
c
puts text
n
c
match[1]
match
n
c
puts email[:subject]
puts email.keys
puts email
n
c
author
c
n
c
author
c
mailboxes_line
mailboxes_line.count
mailboxes_line.length
n
MAILBOXES_SEPARATORS
n
mailboxes_line
n
address
n
mailbox_match.length
n
mailbox_match
n
p mailboxes_line
n
match.length
match
n
c
n
entry
n
key
entry.is_a?(Array)
c
display key_line
d key_line
c
puts @regexes[:non_breaking_space]
puts @regexes[:separator_line]
puts @regexes['separator_line']
puts @regexes.keys
puts @regexes
puts @regexes[:separator_line]
p body
p match
c
puts result
c
step 2
s2
c
s
pry
into
i
c
step
c
step
down
list
h
where
h
\h
?
c
puts email
puts email_file
puts subject_file
p subject
c
subject
parsed_subject
n
